name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
  pull_request: {}
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  repo-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Set up uv
        run: curl -LsSf https://astral.sh/uv/0.3.5/install.sh | sh
      - uses: extractions/setup-just@v2
      # Need this because we're running `cargo clippy` and `fmt`
      # directly.
      - uses: dsherret/rust-toolchain-file@v1
      - name: Install cbfmt
        run: |
            mkdir /tmp/cbfmt && cd $_
            curl -fsSL -o cbfmt.tar.gz "https://github.com/lukas-reineke/cbfmt/releases/download/v0.2.0/cbfmt_linux-x86_64_v0.2.0.tar.gz"
            tar --strip-components 1 -xvf cbfmt.tar.gz
            mv cbfmt /usr/local/bin/
      - name: Prep venv
        shell: bash
        run: |
          uv venv -p 3.12 venv
          . venv/bin/activate
          uv pip sync --strict requirements/dev.txt
      - name: Check pre-commit hooks
        shell: bash
        run: |
          . venv/bin/activate
          just lint-pc
      - name: Run lints
        shell: bash
        run: |
          . venv/bin/activate
          just lint
      - name: Run Rust tests
        shell: bash
        run: |
          . venv/bin/activate
          just test-rs
      - name: Run documentation tests
        shell: bash
        run: |
          . venv/bin/activate
          just test-doc

  linux:
    strategy:
      matrix:
        # python-version: ['3.8', '3.9']
        # target: ['x86_64', 'aarch64', 'armv7']
        python-version: ['3.10', '3.11', '3.12']
        target: ['x86_64']
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up uv
        run: curl -LsSf https://astral.sh/uv/0.3.5/install.sh | sh
      - uses: extractions/setup-just@v2
      - name: Prep build venv
        shell: bash
        run: |
          uv venv -p ${{ matrix.python-version }} venv/
          . venv/bin/activate
          uv pip sync --strict requirements/build-py${{ matrix.python-version }}.txt
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        env:
          RUSTFLAGS: -C force-frame-pointers=yes
        with:
          target: ${{ matrix.target }}
          args: --release --out dist/ -i ${{ matrix.python-version }}
          sccache: true
      - name: Run Python tests
        # Only run tests for the host architecture, as aarch64 and
        # armv7 are cross-compiled on Ubuntu runners.
        if: ${{ matrix.target == 'x86_64' }}
        shell: bash
        env:
          TEST_KAFKA_BROKER: ${{ secrets.TEST_KAFKA_BROKER }}
          CLUSTER_API_KEY: ${{ secrets.CLUSTER_API_KEY }}
          CLUSTER_API_SECRET: ${{ secrets.CLUSTER_API_SECRET }}
        run: |
          . venv/bin/activate
          WHEEL_FILE=$(ls ./dist/*.whl)
          uv pip install -v --no-deps $WHEEL_FILE
          just test-py
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist

  # macos:
  #   strategy:
  #     matrix:
  #       python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
  #       target: ['x86_64', 'aarch64']
  #   runs-on: macos-latest
  #   env:
  #     MACOSX_DEPLOYMENT_TARGET: 10.9
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Set up uv
  #       run: curl -LsSf https://astral.sh/uv/0.3.5/install.sh | sh
  #     - uses: extractions/setup-just@v2
  #     - name: Prep build venv
  #       shell: bash
  #       run: |
  #         uv venv -p ${{ matrix.python-version }} venv/
  #         . venv/bin/activate
  #         uv pip sync --strict requirements/build-py${{ matrix.python-version }}.txt
  #     - name: Build wheel
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         RUSTFLAGS: -C force-frame-pointers=yes
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist/ -i ${{ matrix.python-version }}
  #     - name: Run Python tests
  #       # Only run tests for the host architecture, as x86_64 is
  #       # cross-compiled on macOS runners.
  #       if: ${{ matrix.target == 'aarch64' }}
  #       shell: bash
  #       env:
  #         TEST_KAFKA_BROKER: ${{ secrets.TEST_KAFKA_BROKER }}
  #         CLUSTER_API_KEY: ${{ secrets.CLUSTER_API_KEY }}
  #         CLUSTER_API_SECRET: ${{ secrets.CLUSTER_API_SECRET }}
  #       run: |
  #         . venv/bin/activate
  #         WHEEL_FILE=$(ls ./dist/*.whl)
  #         uv pip install -v --no-deps $WHEEL_FILE
  #         just test-py
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-macos-${{ matrix.target }}-${{ matrix.python-version }}
  #         path: dist

  # windows:
  #   strategy:
  #     matrix:
  #       python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
  #   runs-on: windows-latest
  #   steps:
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - shell: cmd
  #       run: |
  #         set PATH=%PATH%;%wix%bin;"%WindowsSdkVerBinPath%"\x86
  #     - uses: actions/checkout@v3
  #     - uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Set up uv
  #       run: curl -LsSf https://astral.sh/uv/0.3.5/install.sh | sh
  #     - uses: extractions/setup-just@v2
  #     - name: Prep build venv
  #       run: |
  #         uv venv -p ${{ matrix.python-version }} venv/
  #         venv/Scripts/activate
  #         uv pip sync --strict requirements/build-py${{ matrix.python-version }}.txt
  #     - name: Build wheel
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         RUSTFLAGS: -C force-frame-pointers=yes
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist/ -i ${{ matrix.python-version }}
  #         sccache: true
  #     - name: Run Python tests
  #       run: |
  #         venv/Scripts/activate
  #         $WHEEL_FILE=@((gci -path dist *.whl|Resolve-path -relative) -replace "","")[0]
  #         uv pip install -v --no-deps $WHEEL_FILE
  #         just test-py
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.target }}-${{ matrix.python-version }}
  #         path: dist

  upload:
    name: Store wheels in S3
    runs-on: ubuntu-22.04
    if: "github.ref == 'refs/heads/main'"
    # needs: [ linux, macos, windows ]
    needs: [ linux ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*-*
          path: wheels
          merge-multiple: true
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: us-west-2
      - name: Upload files to S3 with AWS CLI
        run: |
          aws s3 sync ./wheels s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }} --delete
          aws s3 ls s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }}
