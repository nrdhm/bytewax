name: CD

on:
  push:
    tags:
      - 'v*' # This will trigger the workflow for any tag starting with 'v', e.g., v1.0, v2.0.1
      # - '*' # Use this to trigger for any tag
      # - 'release-*' # Use this to trigger for tags starting with 'release-'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  linux-build:
    name: Build for Linux
    strategy:
      matrix:
        # target: ['x86_64', 'aarch64', 'armv7']
        # python-version: ['3.10', '3.11', '3.12']
        python-version: ['3.12']
        target: ['x86_64']
    # runs-on: ubuntu-latest
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up uv
        run: curl -LsSf https://astral.sh/uv/0.3.5/install.sh | sh
      - uses: extractions/setup-just@v2
      - name: Prep build venv
        shell: bash
        run: |
          uv venv -p ${{ matrix.python-version }} venv/
          . venv/bin/activate
          uv pip sync --strict requirements/build-py${{ matrix.python-version }}.txt
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        env:
          RUSTFLAGS: -C force-frame-pointers=yes
        with:
          target: ${{ matrix.target }}
          args: --release --out dist/ -i ${{ matrix.python-version }}
          sccache: true
      - name: Run Python tests
        # Only run tests for the host architecture, as aarch64 and
        # armv7 are cross-compiled on Ubuntu runners.
        if: ${{ matrix.target == 'x86_64' }}
        shell: bash
        # env:
          # TEST_KAFKA_BROKER: ${{ secrets.TEST_KAFKA_BROKER }}
          # CLUSTER_API_KEY: ${{ secrets.CLUSTER_API_KEY }}
          # CLUSTER_API_SECRET: ${{ secrets.CLUSTER_API_SECRET }}
        run: |
          . venv/bin/activate
          WHEEL_FILE=$(ls ./dist/*.whl)
          uv pip install -v --no-deps $WHEEL_FILE
          just test-py
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-22.04
    needs: [ linux-build ]
    outputs:
      bytewax-version: ${{ steps.get-info.outputs.bytewax-version }}
    environment:
      name: pypi
      url: https://pypi.org/p/bytewax-fork
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download Wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*-*
          path: dist/
          merge-multiple: true

      - uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Show workdir
        run: |
          tree

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1


# jobs:
#   build-and-release:
#     name: Release
#     runs-on: ubuntu-latest
#     if: "startsWith(github.ref, 'refs/tags/')"
#     outputs:
#       bytewax-version: ${{ steps.get-info.outputs.bytewax-version }}
#       version-image-tag: ${{ steps.get-info.outputs.version-image-tag }}
#       latest-image-tag: ${{ steps.get-info.outputs.latest-image-tag }}

#     steps:
#       - name: Get Version and Tags
#         id: get-info
#         run: |
#           BYTEWAX_VERSION=${GITHUB_REF:11}
#           echo "::set-output name=bytewax-version::${BYTEWAX_VERSION}"
#           REPOSITORY=bytewax/bytewax
#           IMAGE_TAG="${REPOSITORY}:${GITHUB_REF:11}"
#           echo "::set-output name=version-image-tag::${IMAGE_TAG}"
#           echo "::set-output name=latest-image-tag::${REPOSITORY}:latest"

#       - name: Report Info
#         run: |
#           [ -n "${{steps.get-info.outputs.bytewax-version}}" ]
#           echo "::notice title=Bytewax Version::${{ steps.get-info.outputs.bytewax-version }}"
#           [ -n "${{steps.get-info.outputs.version-image-tag}}" ]
#           echo "::notice title=Base Tag::${{ steps.get-info.outputs.version-image-tag }}"
#           [ -n "${{steps.get-info.outputs.latest-image-tag}}" ]
#           echo "::notice title=Latest Tag::${{ steps.get-info.outputs.latest-image-tag }}"
#           echo "::notice title=Run ID::${{ github.event.workflow_run.id }}"

#       - name: Download Wheels
#         uses: actions/download-artifact@v4
#         with:
#           run-id: ${{ github.event.workflow_run.id }}
#           pattern: wheels-*-*
#           path: wheels
#           merge-multiple: true

#       # - name: Upload files to S3 with AWS CLI
#       #   run: |
#       #     aws s3 sync ./wheels s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }} --delete
#       #     aws s3 ls s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }}

#       # - name: Download files from S3 with AWS CLI
#       #   run: |
#       #     aws s3 sync s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }} .
#       #     tree

#       # - name: Check the Version and Quantity of Wheel files
#       #   env:
#       #     NEEDED_VERSION: ${{steps.get-info.outputs.bytewax-version}}
#       #     WHEELS: 30
#       #   run: |
#       #     cat << EOF > ./check_versions.sh
#       #     #!/bin/bash
#       #     echo "Looking for version \$NEEDED_VERSION in \$WHEELS wheel files..."
#       #     wheels_found=0
#       #     for file in *.whl
#       #     do
#       #       echo "Processing file: \$file"
#       #       file_version=\$(echo \$file | sed 's/bytewax-//' | sed 's/-.*//')
#       #       echo "Version in file: \$file_version"
#       #       if [ "\$NEEDED_VERSION" = "\$file_version" ]; then
#       #         echo "OK"
#       #         wheels_found=\$((wheels_found+1))
#       #       else
#       #         echo "Versions mismatch. Canceling..."
#       #         exit 1
#       #       fi
#       #     done
#       #     echo "\$wheels_found wheel files with the right version found."
#       #     if [ "\$wheels_found" = "\$WHEELS" ]; then
#       #       echo "Verification passed."
#       #     else
#       #       echo "Wrong number of wheel files."
#       #       echo "You should check if the last CI Workflow ends successfully."
#       #       echo "https://github.com/bytewax/bytewax/actions/workflows/CI.yml"
#       #       exit 1
#       #     fi
#       #     EOF
#       #     chmod +x ./check_versions.sh
#       #     ./check_versions.sh

#       - uses: actions/setup-python@v2
#         with:
#           python-version: 3.12

#       - name: Publish to PyPI
#         # env:
#         #   TWINE_USERNAME: __token__
#         #   TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
#         run: |
#           tree
#         #  pip install --upgrade twine
#         #  twine upload --skip-existing *.whl

#   # check-pypi:
#   #   name: Check PyPI
#   #   runs-on: ubuntu-latest
#   #   if: "startsWith(github.ref, 'refs/tags/')"
#   #   needs: [ release ]
#   #   steps:
#   #   - name: Install ansible
#   #     run: |
#   #       pip install ansible==3.4.0
#   #       ansible -m ping localhost
#   #   - name: Create task file
#   #     run: |
#   #       cat << EOF > ./pip_task.yaml
#   #       ---
#   #       - name: Try install bytewax using pip
#   #         hosts: localhost
#   #         tasks:
#   #         - name: Loop
#   #           shell: "pip install bytewax=={{ bytewax_version }} -v"
#   #           register: pip_result
#   #           retries: 60
#   #           until: pip_result.rc == 0
#   #           delay: 10
#   #       EOF
#   #   - name: Upgrade pip version
#   #     run: |
#   #       pip --version
#   #       pip install --upgrade pip
#   #   - name: Check PyPI index before building docker images
#   #     run: |
#   #       ansible-playbook ./pip_task.yaml -e bytewax_version=${{ needs.release.outputs.bytewax-version }} -vvv

#   # publish-docker-hub:
#   #   name: Publish to Docker Hub
#   #   if: "startsWith(github.ref, 'refs/tags/')"
#   #   needs: [ release, check-pypi ]
#   #   runs-on: ubuntu-latest
#   #   strategy:
#   #     matrix:
#   #       python-version: ['3.10', '3.11', '3.12']
#   #   steps:
#   #   - uses: actions/checkout@v2
#   #   - name: Set up QEMU
#   #     uses: docker/setup-qemu-action@v2
#   #   - name: Set up Docker Buildx
#   #     uses: docker/setup-buildx-action@v1
#   #   - name: Login to Docker Hub
#   #     uses: docker/login-action@v1
#   #     with:
#   #       username: ${{ secrets.DOCKERHUB_USERNAME }}
#   #       password: ${{ secrets.DOCKERHUB_PASSWORD }}
#   #   - name: Build and push to Docker Hub
#   #     id: docker_build
#   #     uses: docker/build-push-action@v4
#   #     with:
#   #       push: true
#   #       platforms: linux/amd64, linux/arm64
#   #       tags: |
#   #         ${{ needs.release.outputs.version-image-tag }}-python${{ matrix.python-version }}
#   #         ${{ needs.release.outputs.latest-image-tag }}-python${{ matrix.python-version }}
#   #       build-args: |
#   #         BYTEWAX_VERSION=${{ needs.release.outputs.bytewax-version }}
#   #         PYTHON_VERSION=${{ matrix.python-version }}
#   #       file: Dockerfile.release
#   #   - name: Tag latest
#   #     if: ${{ matrix.python-version == '3.9' }}
#   #     run: |
#   #       docker buildx imagetools create -t ${{ needs.release.outputs.latest-image-tag }} ${{ needs.release.outputs.version-image-tag }}-python${{ matrix.python-version }}
